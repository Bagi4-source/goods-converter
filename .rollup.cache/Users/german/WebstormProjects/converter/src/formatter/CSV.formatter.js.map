{"version":3,"file":"CSV.formatter.js","sourceRoot":"","sources":["CSV.formatter.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AAGpC,MAAM,OAAO,YAAY;IACrB,KAAK,CAAC,MAAM,CAAC,QAAmB,EAAE,UAAuB,EAAE,MAAyB;QAChF,MAAM,gBAAgB,GAA2B,EAAE,CAAC;QACpD,UAAU,EAAE,OAAO,CAAC,CAAC,EAAC,EAAE,EAAE,IAAI,EAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;QAEjE,MAAM,SAAS,GAAG,CAAC,OAAgB,EAAE,EAAE;YACnC,MAAM,MAAM,GAA2B,EAAE,CAAC;YAE1C,IAAI,CAAC,MAAM,EAAE,WAAW;gBACpB,OAAO,MAAM,CAAA;YAEjB,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,EAAC,GAAG,EAAE,KAAK,EAAC,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAA;YAC3E,OAAO,MAAM,CAAA;QACjB,CAAC,CAAA;QACD,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAClC,GAAG,OAAO;YACV,QAAQ,EAAE,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC;YAC9C,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC;YACjC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC;YACjC,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;YAC7B,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,EAAC,GAAG,EAAE,KAAK,EAAC,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;YAC1E,GAAG,SAAS,CAAC,OAAO,CAAC;SACxB,CAAC,CAAC,CAAA;QACH,OAAO,QAAQ,CAAC,IAAI,EAAE,EAAC,eAAe,EAAE,EAAE,EAAC,CAAC,CAAA;IAChD,CAAC;CACJ","sourcesContent":["import {Category, Product} from \"../types\";\nimport {json2csv} from \"json-2-csv\";\nimport {Formatter, FormatterOptions} from \"./formater.types\";\n\nexport class CSVFormatter implements Formatter {\n    async format(products: Product[], categories?: Category[], option?: FormatterOptions): Promise<string> {\n        const mappedCategories: Record<number, string> = {};\n        categories?.forEach(({id, name}) => mappedCategories[id] = name);\n\n        const getParams = (product: Product) => {\n            const params: Record<string, string> = {};\n\n            if (!option?.splitParams)\n                return params\n\n            product.params?.forEach(({key, value}) => params[`Param [${key}]`] = value)\n            return params\n        }\n        const data = products.map(product => ({\n            ...product,\n            category: mappedCategories[product.categoryId],\n            images: product.images?.join(\",\"),\n            videos: product.videos?.join(\",\"),\n            tags: product.tags?.join(\",\"),\n            codesTN: product.codesTN?.join(\", \"),\n            params: product.params?.map(({key, value}) => `${key}=${value}`).join(\",\"),\n            ...getParams(product)\n        }))\n        return json2csv(data, {emptyFieldValue: \"\"})\n    }\n}\n\n"]}