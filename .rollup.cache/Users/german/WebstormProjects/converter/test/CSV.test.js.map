{"version":3,"file":"CSV.test.js","sourceRoot":"","sources":["CSV.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,GAAG,EAAE,QAAQ,EAAW,MAAM,cAAc,CAAC;AAC9D,OAAO,EAAC,QAAQ,EAAE,EAAE,EAAC,MAAM,WAAW,CAAC;AACvC,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,UAAU,EAAC,MAAM,QAAQ,CAAC;AAGlC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC1B,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC;IAGjC,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACpC,MAAM,QAAQ,GAAc;YACxB;gBACI,SAAS,EAAE,CAAC;gBACZ,QAAQ,EAAE,CAAC;gBACX,SAAS,EAAE,IAAI;gBACf,QAAQ,EAAE,QAAQ,CAAC,GAAG;gBACtB,KAAK,EAAE,OAAO;gBACd,WAAW,EAAE,aAAa;gBAC1B,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE,WAAW;gBACvB,UAAU,EAAE,CAAC;gBACb,eAAe,EAAE,OAAO;gBACxB,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;gBAC5B,KAAK,EAAE,KAAK;gBACZ,QAAQ,EAAE,KAAK;gBACf,kBAAkB,EAAE,IAAI;gBACxB,aAAa,EAAE,KAAK;gBACpB,SAAS,EAAE,IAAI;gBACf,OAAO,EAAE,cAAc;gBACvB,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,UAAU;gBACtB,GAAG,EAAE,GAAG,CAAC,MAAM;gBACf,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,CAAC;wBACL,GAAG,EAAE,IAAI;wBACT,KAAK,EAAE,IAAI;qBACd,EAAE;wBACC,GAAG,EAAE,IAAI;wBACT,KAAK,EAAE,IAAI;qBACd,CAAC;gBACF,GAAG,EAAE;oBACD,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE,CAAC;iBACX;gBACD,IAAI,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC;gBAC3B,KAAK,EAAE,KAAK;aACf;SACJ,CAAC;QACF,MAAM,UAAU,GAAe;YAC3B,EAAC,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAC;YACnC,EAAC,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,4BAA4B,EAAC;YACxD,EAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAC;SAC9B,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC;QACtF,MAAM,mBAAmB,GAAG,seAAse,CAAC;QACngB,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAEvD,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC5D,MAAM,cAAc,GAAG,0cAA0c,CAAC;QACle,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import {Product, Vat, Currency, Category} from \"../src/types\";\nimport {describe, it} from \"node:test\";\nimport {expect} from 'chai';\nimport {Formatters} from \"../src\";\n\n\ndescribe('CSVConverter', () => {\n    const formatter = Formatters.CSV;\n\n\n    it('should export CSV data', async () => {\n        const products: Product[] = [\n            {\n                productId: 1,\n                parentId: 0,\n                variantId: 1111,\n                currency: Currency.RUR,\n                title: \"Title\",\n                description: \"Description\",\n                vendor: \"Nike\",\n                vendorCode: \"NIKE-1111\",\n                categoryId: 1,\n                countryOfOrigin: \"Китай\",\n                images: [\"image1\", \"image2\"],\n                price: 19000,\n                oldPrice: 20000,\n                additionalExpenses: 1000,\n                purchasePrice: 15000,\n                available: true,\n                barcode: \"567890567893\",\n                weight: 0.15,\n                dimensions: \"12/32/43\",\n                vat: Vat.VAT_20,\n                count: 24,\n                params: [{\n                    key: \"p1\",\n                    value: \"v1\"\n                }, {\n                    key: \"p2\",\n                    value: \"v2\"\n                }],\n                age: {\n                    unit: \"year\",\n                    value: 6\n                },\n                tags: [\"Nike\", \"Кроссовки\"],\n                adult: false\n            }\n        ];\n        const categories: Category[] = [\n            {id: 1, parentId: 2, name: \"Обувь\"},\n            {id: 2, parentId: 3, name: \"Одежда, обувь и аксессуары\"},\n            {id: 3, name: \"Все товары\"},\n        ];\n        const resultSplit = await formatter.format(products, categories, {splitParams: true});\n        const expectedResultSplit = \"productId,parentId,variantId,currency,title,description,vendor,vendorCode,categoryId,countryOfOrigin,images,price,oldPrice,additionalExpenses,purchasePrice,available,barcode,weight,dimensions,vat,count,params,age.unit,age.value,tags,adult,category,videos,codesTN,Param [p1],Param [p2]\\n1,0,1111,RUR,Title,Description,Nike,NIKE-1111,1,Китай,\\\"image1,image2\\\",19000,20000,1000,15000,true,567890567893,0.15,12/32/43,VAT_20,24,\\\"p1=v1,p2=v2\\\",year,6,\\\"Nike,Кроссовки\\\",false,Обувь,,,v1,v2\";\n        expect(resultSplit).to.deep.equal(expectedResultSplit);\n\n        const result = await formatter.format(products, categories);\n        const expectedResult = \"productId,parentId,variantId,currency,title,description,vendor,vendorCode,categoryId,countryOfOrigin,images,price,oldPrice,additionalExpenses,purchasePrice,available,barcode,weight,dimensions,vat,count,params,age.unit,age.value,tags,adult,category,videos,codesTN\\n1,0,1111,RUR,Title,Description,Nike,NIKE-1111,1,Китай,\\\"image1,image2\\\",19000,20000,1000,15000,true,567890567893,0.15,12/32/43,VAT_20,24,\\\"p1=v1,p2=v2\\\",year,6,\\\"Nike,Кроссовки\\\",false,Обувь,,\";\n        expect(result).to.deep.equal(expectedResult);\n    });\n});\n"]}